[1,["20MSyZgyFKkrvw3IyibAlU@f9941","9bREs9MhdCybIiy816h94B","35XIdVH6ZJ5aCRTwAyBary@f9941","5dhac/ALFJ94dzKMx9h6d2@f9941","40VVRgBRxOW4JNJwUQcvMi","f8uMjUIAVErb/30nkmMvAQ@f9941","73kbRVMH5ETqPVk2eymPfx","1a+11X1nJOyIt9C+LsSiYM@f9941","a1wtrfHTtBMofgTWXEOILW","3fe9u32NFNIIXGMpHiodfq@f9941","ed8YPt6uRJnox3yrh2mfC4","98HrzQ+d1M15V96Y09/WMg","f6V2cjtDJB0pWzu/CjdxPD","f5Nh3+kXdJAIaowPADY5fL","c2Zz74KWpGW6+qzBDD+4yx","67ci9mxfdCRbOWSwJzAidF","5bTcb3o89MIpAVG7KDpavL","6fI+15FDZGvIhby07WQqgs","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","35XIdVH6ZJ5aCRTwAyBary@6c48a","3fe9u32NFNIIXGMpHiodfq@6c48a","e3O+Z2VolNdYwjuxzYryMl","e0fNNfDQlKU46P5Ln/KNTD@f9941","d5BIMBdKVI4LoC3OgTD6kZ","41EawOd6xEuJ5RxHGOCRu5","73p0yie2NFd57bJcdQtJjW@f9941","83I2gZB2dELKgb+XULEda0","a0Q/2sXipMlIqrzOxFKoWz@f9941","49ECPxIJxEUa8N6ht3tL8N@f9941","6bOrZ2SoFEmbV6h2cXY7BZ@f9941"],["node","_spriteFrame","root","asset","data","_customMaterial","_parent","_font","_textureSource","_effectAsset","scene","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_objFlags","_id","_active","__editorExtras__","_components","_lpos","_parent","_prefab","_lrot","_euler","_children","_lscale"],-2,9,5,1,4,5,5,2,5],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color","__prefab","_customMaterial"],1,1,6,5,4,6],["42864BhorZIQ47ykEkZAmlK",["rigidBodyType","isCCD","isRigidbody","isTigger","node","__prefab"],-1,1,4],["cc.UITransform",["node","_contentSize","__prefab"],3,1,5,4],"cc.SpriteFrame",["887cehi/0dAV4ZbV3PbMUjo",["node","__prefab"],3,1,4],["b7665YJCdlCapYXGSHpU9HJ",["_enabled","node","__prefab"],2,1,4],["2a269m2uftIrJBP4owo0oMr",["rigidBodyType","isCCD","node","__prefab"],1,1,4],["cc.SceneAsset",["_name"],2],["cc.RenderRoot2D",["node"],3,1],["879c0ijSztE6rkPV/R001Wq",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,12,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5],["cc.ShadowsInfo",["_enabled","_type","_shadowColor"],1,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogEnd","_fogColor"],2,5],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["952c59HiRtDDYg+CFl4Nbgg",["node"],3,1],["4b71aS4EtlA9JyBva/73/7X",["node"],3,1],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","node","__prefab","_font"],0,1,4,6],["cc.LabelOutline",["node","__prefab"],3,1,4]],[[30,0,2],[27,0,1,2,2],[14,0,1,2,3,4,5,5],[3,0,2,1,1],[24,0,2],[3,0,1,1],[0,1,4,7,8,3],[13,0,1,2,3,4,5,4],[25,0,1,2,3],[26,0,1,2,3],[29,0,2],[1,0,2,5,4,3,2],[0,0,7,5,6,12,2],[0,0,7,5,8,6,2],[9,0,1],[1,2,4,6,3,1],[1,1,0,2,5,4,3,3],[1,1,0,2,5,3,3],[6,1,1],[0,0,11,5,8,6,2],[0,0,7,5,8,2],[2,0,2,3,4,5,4],[33,0,1,2,3,4,5,4],[34,0,1,1],[0,0,2,7,6,3],[0,0,1,7,5,6,3],[0,0,7,5,8,6,9,10,2],[0,0,1,11,5,8,6,3],[3,0,2,1],[1,0,2,4,6,3,2],[1,1,0,2,4,3,3],[1,0,2,5,3,2],[2,0,4,2],[2,0,4,5,2],[2,0,1,4,5,3],[5,0,1],[5,0,1,1],[28,0,1,2,2],[31,0,1,2,3,4],[32,0,1,2,4],[8,0,2],[0,0,2,11,5,6,3],[0,0,3,2,11,5,4],[0,0,2,7,5,6,3],[0,0,3,2,7,5,4],[0,0,1,5,8,6,3],[0,0,7,5,8,9,10,2],[0,0,7,5,8,6,9,12,10,2],[0,0,1,5,8,6,9,10,3],[0,0,5,8,6,2],[0,0,1,7,5,8,6,9,10,3],[10,0,1],[11,0,1,2,3,2],[12,0,1,2,3,4,5,6],[15,0,1,2,3,4,5,1],[16,0,1,2,3,2],[17,0,1,2,3],[18,0,1,2,2],[19,0,1,2],[20,1],[21,1],[1,1,0,2,5,4,6,3,3],[22,0,1],[2,0,2,3,1,4,5,5],[23,0,1],[6,0,1,2,2],[7,0,2,3,2],[7,0,1,2,3,3]],[[[[40,"Scene_31"],[41,"Lands","70uGoB3ItNqK6iHkbVkL4X",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13],[[5,-1,[5,0,0]],[14,-2]],[1,391.414,1059.55,0]],[42,"BgObjects",false,"1b/ULJVHdDEZUZYZhI/Ddu",[-17,-18,-19,-20],[[5,-14,[5,5000,5000]],[14,-15],[51,-16]]],[52,"Scene_31",[[-30,2,1,[24,"PlayerOneAchor","b1RjRqK2FMf4RostyvLF3w",-31,[1,-370.606,603.892,0]],[24,"PlayerTwoAchor","541Enpyf5KOKSnTYORyek3",-32,[1,-196.225,609.471,0]],-33],1,1,1,4,4,1],[53,null,null,"c37c216d-ec48-4ceb-bf81-66f2b452a434",null,[],[-21,-22,-23,-24,-25,-26,-27,-28,-29]],[54,[55,0.8,[2,0.8117647058823529,0.8627450980392157,0.9137254901960784,0.520833125],[2,0.452588,0.607642,0.755699,0],[2,0.618555,0.577848,0.544564,0]],[56,true,1,[4,4283190348]],[57,true,23,24],[58,50,[4,4293846998]],[59],[60]]],[43,"Bg","50LezQXZJH0akaQbc8eGjF",3,[[5,-34,[5,5000,5000]],[29,0,-35,[4,4294953903],0,1],[14,-36],[62,-37]],[1,129.259,839.965,0]],[25,"Wall",512,1,[[5,-38,[5,3136,3000]],[30,1,0,-39,[4,4287598591],12],[32,1,-40],[35,-41]],[1,-2904.174,-1028.784,0]],[25,"Wall-001",512,1,[[5,-42,[5,3316.404,3000]],[30,1,0,-43,[4,4287598591],13],[32,1,-44],[35,-45]],[1,2447.88,-1028.784,0]],[44,"LightMask",false,"eboAu2ephO5oS+uKvfUtzQ",3,[[5,-46,[5,5000,5000]],[29,0,-47,[4,4278190080],21,22],[64,-48],[14,-49]]],[12,"Cloud",2,[[5,-50,[5,128,71]],[15,-51,[4,1476395007],2,3],[18,-52]],[1,-1292.595,200.075,0],[1,2,2,1]],[12,"Cloud-001",2,[[5,-53,[5,128,71]],[15,-54,[4,1476395007],4,5],[18,-55]],[1,74.727,818.165,0],[1,4,4,1]],[12,"Cloud-002",2,[[5,-56,[5,128,71]],[15,-57,[4,1476395007],6,7],[18,-58]],[1,-352.4,-29.75,0],[1,6,6,1]],[12,"Cloud-003",2,[[5,-59,[5,128,71]],[15,-60,[4,1476395007],8,9],[18,-61]],[1,-825.03,699.958,0],[1,3,3,1]],[4,["14AXJF5oNKYYHMqoAVIfc+"]],[4,["dbuVzMmhFAe4EALgC6ZkC2"]],[4,["40v6nvFilJnpNwhi5OFbBq"]],[4,["40v6nvFilJnpNwhi5OFbBq"]],[4,["5bIKwUfzNOSYFp2mjAO7Jw"]],[4,["c7+1vmsfdOALUMRq0QoWiQ"]],[4,["38TAf5P95MSbHFmQp6NlNc"]],[4,["d8unrHz9ZAhZTsq2uEV9UH"]],[4,["01GpRkJ0BMIY8K5EI13kMY"]],[6,0,{},1,[7,"14AXJF5oNKYYHMqoAVIfc+",null,null,-62,[8,"baobvXTBhHer1+HIPvK7PI",null,[[9,"EndKeyTool",["_name"],12],[1,["_lpos"],12,[1,-269.091,-1366.434,0]],[1,["_lrot"],12,[3,0,0,0,1]],[1,["_euler"],12,[1,0,0,0]]]],10]],[6,512,{},1,[7,"dbuVzMmhFAe4EALgC6ZkC2",null,null,-63,[8,"e2vgNXtBZPjqG5cVhmN8QQ",null,[[9,"EndDoor",["_name"],13],[1,["_lpos"],13,[1,559.267,-487.097,0]],[1,["_lrot"],13,[3,0,0,0,1]],[1,["_euler"],13,[1,0,0,0]]]],11]],[6,512,{},1,[7,"40v6nvFilJnpNwhi5OFbBq",null,null,-64,[8,"1auy2doL5I7ol0S9u4wo+3",null,[[9,"Land-Platform-Pure-001",["_name"],14],[1,["_lpos"],14,[1,320.669,-582.873,0]],[1,["_lrot"],14,[3,0,0,0,1]],[1,["_euler"],14,[1,0,0,0]],[37,["_contentSize"],[4,["d35OITahdHUpZfSF6I7brT"]],[5,1000,70]]]],14]],[6,512,{},1,[7,"40v6nvFilJnpNwhi5OFbBq",null,null,-65,[8,"3b82IVcRRPUqSEqkgckfWn",null,[[9,"Land-Platform-Pure-002",["_name"],15],[1,["_lpos"],15,[1,-327.495,1845.601,0]],[1,["_lrot"],15,[3,0,0,0,1]],[1,["_euler"],15,[1,0,0,0]],[37,["_contentSize"],[4,["d35OITahdHUpZfSF6I7brT"]],[5,500,50]]]],15]],[6,512,{},1,[7,"5bIKwUfzNOSYFp2mjAO7Jw",null,null,-66,[8,"f9vJhiB1pB2YxNWmcYEOOo",null,[[9,"Land-Platform-Pure-Round",["_name"],16],[1,["_lpos"],16,[1,-1121.871,-577.345,0]],[1,["_lrot"],16,[3,0,0,0,1]],[1,["_euler"],16,[1,0,0,0]]]],16]],[6,0,{},1,[7,"c7+1vmsfdOALUMRq0QoWiQ",null,null,-67,[8,"cbmSW7JvNG4KV+sKTWmdv7",null,[[9,"GravityTool",["_name"],17],[1,["_lpos"],17,[1,-1219.044,-282.742,0]],[1,["_lrot"],17,[3,0,0,0,1]],[1,["_euler"],17,[1,0,0,0]]]],17]],[6,0,{},1,[7,"38TAf5P95MSbHFmQp6NlNc",null,null,-68,[8,"a7co1t9LhOO6sAA1UK76sz",null,[[9,"RopeTool",["_name"],18],[1,["_lpos"],18,[1,-1099.281,-284.82,0]],[1,["_lrot"],18,[3,0,0,0,1]],[1,["_euler"],18,[1,0,0,0]]]],18]],[6,512,{},1,[7,"d8unrHz9ZAhZTsq2uEV9UH",null,null,-69,[8,"4eEDSh7H1M7ZR7rLFDpi2R",null,[[9,"Wall-For-Rope",["_name"],19],[1,["_lpos"],19,[1,-499.722,-1032.225,0]],[1,["_lrot"],19,[3,0,0,0.3826834323650898,0.9238795325112867]],[1,["_euler"],19,[1,0,0,45]]]],19]],[6,0,{},1,[7,"01GpRkJ0BMIY8K5EI13kMY",null,null,-70,[8,"5c8Hr5fP9PpqoENJ/PSSXd",null,[[9,"ObsBox",["_name"],20],[1,["_lpos"],20,[1,-273.39,-1110.534,0]],[1,["_lrot"],20,[3,0,0,0,1]],[1,["_euler"],20,[1,0,0,0]]]],20]]],0,[0,0,1,0,0,1,0,-1,21,0,-2,22,0,-3,5,0,-4,6,0,-5,23,0,-6,24,0,-7,25,0,-8,26,0,-9,27,0,-10,28,0,-11,29,0,0,2,0,0,2,0,0,2,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-1,21,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,-6,26,0,-7,27,0,-8,28,0,-9,29,0,-1,4,0,6,3,0,6,3,0,-6,7,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,2,21,0,2,22,0,2,23,0,2,24,0,2,25,0,2,26,0,2,27,0,2,28,0,2,29,0,10,3,1,6,3,2,6,3,70],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,1,5,1,5,1,5,1,5,1,3,3,1,1,3,3,3,3,3,3,3,5,1,11,12],[8,9,1,2,1,2,1,2,1,2,10,11,0,0,4,4,12,13,14,15,16,17,5,18,19]],[[{"name":"cloud1","rect":{"x":0,"y":0,"width":128,"height":71},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":71},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-35.5,0,64,-35.5,0,-64,35.5,0,64,35.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,71,128,71,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-35.5,"z":0},"maxPos":{"x":64,"y":35.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[8],[20]],[[{"name":"chocoCenter-001","rect":{"x":0,"y":0,"width":70,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":70,"height":70},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-35,-35,0,35,-35,0,-35,35,0,35,35,0],"indexes":[0,1,2,2,1,3],"uv":[0,70,70,70,0,0,70,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-35,"y":-35,"z":0},"maxPos":{"x":35,"y":35,"z":0}},"packable":false,"pixelsToUnit":1000,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[8],[21]],[[[10,"Land-Platform-Pure"],[45,"Land-Platform-Pure",512,[[3,-2,[0,"d35OITahdHUpZfSF6I7brT"],[5,140,222]],[16,1,0,-3,[0,"82syx6lF5FxY1sNMJCD7Z5"],[4,4287598591],0],[66,1,-4,[0,"6aBfKv8rxGY6/mA/PT8k5j"]]],[2,"40v6nvFilJnpNwhi5OFbBq",null,null,null,-1,0],[1,-543.32,153.095,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,4,1,4],[0],[1],[0]],[[[10,"ObsBox"],[19,"ObsBox",[-4,-5,-6,-7,-8],[[3,-2,[0,"76QD02p1tNjoyQ/SJK5KjP"],[5,60,60]],[33,1,-3,[0,"9cgi+ZJ59Dp6abQuR8M/+o"]]],[2,"01GpRkJ0BMIY8K5EI13kMY",null,null,null,-1,0],[1,-273.39,-1110.534,0]],[46,"Box",1,[[3,-9,[0,"b8Va66AwpLwJzCIYgme2yU"],[5,55,55]],[11,0,-10,[0,"15yot5bCVM/pQXC/IKp17E"],[4,4279121771],0],[34,1,true,-11,[0,"455B+tsyJKj7fHdwYzSHG5"]]],[2,"fe8R+rXFNCfoPQxQYYNu5S",null,null,null,1,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[26,"Obses",1,[[3,-12,[0,"dbtyIWwxxO5qkO748jVnFG"],[5,55,12]],[11,0,-13,[0,"bf15IUnTlBsqmgJjUL28PM"],[4,4280427042],1]],[2,"f6jUU2RRRLMInCNZ3Wu8Gc",null,null,null,1,0],[1,-34,0,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[47,"Obses-001",1,[[3,-14,[0,"f4DCS7ustF2KoE8QnShJxy"],[5,55,12]],[11,0,-15,[0,"e4VVHu31JNdYFNnkasVcnA"],[4,4280427042],2]],[2,"3aZcbChZ9Km4jTqtmOi3Mh",null,null,null,1,0],[1,34,0,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,1,-1,1],[1,0,0,90]],[13,"Obses-002",1,[[3,-16,[0,"8fbHk9B6lFQ7D14/3+nePO"],[5,55,12]],[11,0,-17,[0,"fcKgl9XblKaKwCidRn2vvD"],[4,4280427042],3]],[2,"8aZKBetzpJb6qsUvaRfP+H",null,null,null,1,0],[1,0,34,0]],[26,"Obses-003",1,[[3,-18,[0,"dd1powz9ZFNJbqeIfuT+Ok"],[5,55,12]],[11,0,-19,[0,"39wo1xozpF941/sGF7Hw3N"],[4,4280427042],4]],[2,"1f6LnBEG5IF68L/vaXYN1P",null,null,null,1,0],[1,0,-34,0],[3,0,0,1,6.123233995736766e-17],[1,0,0,180]]],0,[0,2,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,4,1,19],[0,0,0,0,0],[1,1,1,1,1],[5,3,3,3,3]],[[[10,"Wall-For-Rope"],[48,"Wall-For-Rope",512,[[3,-2,[0,"67esdGmd1C3blIEdDBKGiG"],[5,60,60]],[16,1,0,-3,[0,"a8m0/qXINC8YeVOp+ed/Cw"],[4,4287598591],0],[33,1,-4,[0,"08L2duKPJPIoCWE/0eT8D5"]],[36,-5,[0,"c882H7WVRPZKL5GYnh2JZ3"]]],[2,"d8unrHz9ZAhZTsq2uEV9UH",null,null,null,-1,0],[1,-499.722,-1032.225,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,4,1,5],[0],[1],[0]],[[[38,"light_2d_mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALPHA_TEST":true}],[[[{"obsLines":[]},"envColor",8,[4,4278190080]]],11]]],0,0,[0],[9],[22]],[[[39,"../others/tiled_effect",[{"hash":2870035384,"name":"../others/tiled_effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"MyConstant","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"MyConstant","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\n layout(std140) uniform MyConstant {\n  vec4 tilingOffset;\n};\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord* tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\n     uniform vec4 tilingOffset;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord* tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":55,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"IS_GRAY","type":"boolean"}]}],[{"passes":[{"program":"../others/tiled_effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"tilingOffset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[10,"EndDoor"],[27,"EndDoor",512,[-6,-7],[[3,-2,[0,"47stvCBdRL07kIa9+GDG+h"],[5,160,120]],[61,2,0,-3,[0,"0fsYbALjhDBIZu1dboqXdO"],[4,4280352512],2,3],[63,1,false,true,true,-4,[0,"38BJ8E+PdO55KipRDAYUsW"]],[65,false,-5,[0,"37ip0mDtxGvq8e3YleaZiY"]]],[2,"dbuVzMmhFAe4EALgC6ZkC2",null,null,null,-1,0],[1,809.1000000000001,169.87400000000002,0]],[13,"Info",1,[[3,-8,[0,"65zJ5rbBVJU6b5RQYA3VUh"],[5,84,54.4]],[22,"终点",40,false,-9,[0,"c4uAIRrQRMZZH2akLKKJzh"],1],[23,-10,[0,"9dqaXLh9tAU4jtU67FM27D"]]],[2,"71y3PHdzdA87PIGoqSZDUV",null,null,null,1,0],[1,0,90,0]],[20,"Node",1,[[3,-11,[0,"bdCuD6NU5GmJT+ETDqaWI3"],[5,162,122]],[17,1,0,-12,[0,"dbcZLJaw9KDqtRMyKDTnrl"],0]],[2,"39NMxoS+hMtqq4ZqdZw2eO",null,null,null,1,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,4,1,12],[0,0,0,0],[1,7,5,1],[23,24,25,26]],[[[38,"tiled_material",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"tilingOffset",8,[2,24,24,0,0]]],11]]],0,0,[0],[9],[27]],[[[10,"RopeTool"],[19,"RopeTool",[-5,-6],[[3,-2,[0,"d8Ck35npxJZo3m55RluWx1"],[5,80,40]],[17,1,0,-3,[0,"3935B60apOcrD69lMGUUTh"],2],[21,1,false,true,-4,[0,"ff7UfI0MVDwY6tzeE74a9n"]]],[2,"38TAf5P95MSbHFmQp6NlNc",null,null,null,-1,0],[1,-379.943,232.874,0]],[13,"Tag",1,[[3,-7,[0,"6eQ/Y+51dM6pppdoJz4clY"],[5,78,54.4]],[22,"绳子",40,false,-8,[0,"f354cp0ddFBqVxWQ7TCh/z"],0],[23,-9,[0,"bbCWr45PpEz5rH2BkJMr2Y"]]],[2,"524evboxVHNZFmmfPzd+gz",null,null,null,1,0],[1,0,75,0]],[20,"Node",1,[[28,-10,[0,"3aenRm4w5NipF0suRYCn1x"]],[31,0,-11,[0,"8d2grxP5dNJr0aOn3Cp3in"],1]],[2,"67Hyh9mGxKwrBiUuTCCJvA",null,null,null,1,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,4,1,11],[0,0,0],[7,1,1],[6,7,28]],[[[39,"../others/light_2d_effect",[{"hash":1912901624,"name":"../others/light_2d_effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"envColor","type":16,"count":1}],"defines":[]},{"name":"FragConstants2","stageFlags":16,"binding":2,"members":[{"name":"obsLines","type":16,"count":10}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"envColor","type":16,"count":1}],"defines":[]},{"name":"FragConstants2","stageFlags":16,"binding":2,"members":[{"name":"obsLines","type":16,"count":10}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n      highp vec4 cc_reflectionProbeData1;\n      highp vec4 cc_reflectionProbeData2;\n    };\n#endif\n#if SAMPLE_FROM_RT\n    #define QUATER_PI         0.78539816340\n    #define HALF_PI           1.57079632679\n    #define PI                3.14159265359\n    #define PI2               6.28318530718\n    #define PI4               12.5663706144\n    #define INV_QUATER_PI     1.27323954474\n    #define INV_HALF_PI       0.63661977237\n    #define INV_PI            0.31830988618\n    #define INV_PI2           0.15915494309\n    #define INV_PI4           0.07957747155\n    #define EPSILON           1e-6\n    #define EPSILON_LOWP      1e-4\n    #define LOG2              1.442695\n    #define EXP_VALUE         2.71828183f\n    #define FP_MAX            65504.0\n    #define FP_SCALE          0.0009765625\n    #define FP_SCALE_INV      1024.0\n    #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n            #define LIGHT_MAP_TYPE_DISABLED 0\n    #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n    #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n    #define REFLECTION_PROBE_TYPE_NONE 0\n    #define REFLECTION_PROBE_TYPE_CUBE 1\n    #define REFLECTION_PROBE_TYPE_PLANAR 2\n    #define LIGHT_TYPE_DIRECTIONAL 0.0\n    #define LIGHT_TYPE_POINT 1.0\n    #define LIGHT_TYPE_SPOT 2.0\n    #define LIGHT_TYPE_SPHERE 3.0\n    #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n    #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n    #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n    #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n    #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n    #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n    #define TONE_MAPPING_ACES 0\n    #define TONE_MAPPING_LINEAR 1\n    #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nout vec3 poss;\nvec4 vert() {\n    vec4 pos = vec4(a_position, 1);\n    #if USE_LOCAL\n        pos = cc_matWorld * pos;\n    #endif\n    #if USE_PIXEL_ALIGNMENT\n        pos = cc_matView * pos;\n        pos.xyz = floor(pos.xyz);\n        pos = cc_matProj * pos;\n    #else\n        pos = cc_matViewProj * pos;\n    #endif\n    uv0 = a_texCoord;\n    #if SAMPLE_FROM_RT\n        uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n    #endif\n    color = a_color;\n    poss = a_position;\n    return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 color;\nin vec3 poss;\nlayout(std140) uniform FragConstants {\n    vec4 envColor;\n};\nlayout(std140) uniform FragConstants2 {\n    vec4 obsLines[10];\n};\n#if USE_TEXTURE\n    in vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag() {\n    vec4 o = vec4(envColor.x, envColor.y, envColor.z, envColor.w);\n    float arph = envColor.w;\n    for(int i = 0; i < 5; i ++ ) {\n        float x = obsLines[i * 2].x;\n        float y = obsLines[i * 2].y;\n        float radius = obsLines[i * 2].z;\n        float dir = obsLines[i * 2].w;\n        float view = obsLines[i * 2+1].x;\n        float r = obsLines[i * 2+1].y;\n        float g = obsLines[i * 2+1].z;\n        float b = obsLines[i * 2+1].w;\n        if (x == 0.0 && y == 0.0)continue;\n        float dis = distance(vec3(poss.x, poss.y, 0.0), vec3(x, y, 0.0));\n        if (dis < radius) {\n            if (view == 0.0) {\n                float dd = radius - dis;\n                float arph2 = 30.0 / dd;\n                if (arph2 < arph)arph = arph2;\n            }else {\n                vec3 p1 = vec3(poss.x - x, poss.y - y, 0.0);\n                vec2 dp1 = vec2(p1.x, p1.y);\n                float d = acos(dot(normalize(dp1), normalize(vec2(r, g))));\n                if (abs(d) < view) {\n                    float rr = view - abs(d);\n                    float dd = radius - dis;\n                    float arph2 = 30.0 / dd;\n                    if (arph2 < arph)arph = arph2;\n                }\n            }\n        }\n    }\n    o.w = arph;\n    return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n    uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n    #define QUATER_PI         0.78539816340\n    #define HALF_PI           1.57079632679\n    #define PI                3.14159265359\n    #define PI2               6.28318530718\n    #define PI4               12.5663706144\n    #define INV_QUATER_PI     1.27323954474\n    #define INV_HALF_PI       0.63661977237\n    #define INV_PI            0.31830988618\n    #define INV_PI2           0.15915494309\n    #define INV_PI4           0.07957747155\n    #define EPSILON           1e-6\n    #define EPSILON_LOWP      1e-4\n    #define LOG2              1.442695\n    #define EXP_VALUE         2.71828183f\n    #define FP_MAX            65504.0\n    #define FP_SCALE          0.0009765625\n    #define FP_SCALE_INV      1024.0\n    #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n            #define LIGHT_MAP_TYPE_DISABLED 0\n    #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n    #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n    #define REFLECTION_PROBE_TYPE_NONE 0\n    #define REFLECTION_PROBE_TYPE_CUBE 1\n    #define REFLECTION_PROBE_TYPE_PLANAR 2\n    #define LIGHT_TYPE_DIRECTIONAL 0.0\n    #define LIGHT_TYPE_POINT 1.0\n    #define LIGHT_TYPE_SPOT 2.0\n    #define LIGHT_TYPE_SPHERE 3.0\n    #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n    #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n    #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n    #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n    #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n    #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n    #define TONE_MAPPING_ACES 0\n    #define TONE_MAPPING_LINEAR 1\n    #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvarying vec3 poss;\nvec4 vert() {\n    vec4 pos = vec4(a_position, 1);\n    #if USE_LOCAL\n        pos = cc_matWorld * pos;\n    #endif\n    #if USE_PIXEL_ALIGNMENT\n        pos = cc_matView * pos;\n        pos.xyz = floor(pos.xyz);\n        pos = cc_matProj * pos;\n    #else\n        pos = cc_matViewProj * pos;\n    #endif\n    uv0 = a_texCoord;\n    #if SAMPLE_FROM_RT\n        uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n    #endif\n    color = a_color;\n    poss = a_position;\n    return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 color;\nvarying vec3 poss;\n   uniform vec4 envColor;\n    uniform vec4 obsLines[10];\n#if USE_TEXTURE\n    varying vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag() {\n    vec4 o = vec4(envColor.x, envColor.y, envColor.z, envColor.w);\n    float arph = envColor.w;\n    for(int i = 0; i < 5; i ++ ) {\n        float x = obsLines[i * 2].x;\n        float y = obsLines[i * 2].y;\n        float radius = obsLines[i * 2].z;\n        float dir = obsLines[i * 2].w;\n        float view = obsLines[i * 2+1].x;\n        float r = obsLines[i * 2+1].y;\n        float g = obsLines[i * 2+1].z;\n        float b = obsLines[i * 2+1].w;\n        if (x == 0.0 && y == 0.0)continue;\n        float dis = distance(vec3(poss.x, poss.y, 0.0), vec3(x, y, 0.0));\n        if (dis < radius) {\n            if (view == 0.0) {\n                float dd = radius - dis;\n                float arph2 = 30.0 / dd;\n                if (arph2 < arph)arph = arph2;\n            }else {\n                vec3 p1 = vec3(poss.x - x, poss.y - y, 0.0);\n                vec2 dp1 = vec2(p1.x, p1.y);\n                float d = acos(dot(normalize(dp1), normalize(vec2(r, g))));\n                if (abs(d) < view) {\n                    float rr = view - abs(d);\n                    float dd = radius - dis;\n                    float arph2 = 30.0 / dd;\n                    if (arph2 < arph)arph = arph2;\n                }\n            }\n        }\n    }\n    o.w = arph;\n    return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":12}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../others/light_2d_effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"envColor":{"type":16,"value":[0,0,0,0]},"obsLines":{"type":16,"value":[0,0,0,0]}}}]}]]],0,0,[],[],[]],[[[10,"EndKeyTool"],[49,"EndKeyTool",[[3,-2,[0,"daO/e5Ib1ClIl4ClepYSNX"],[5,80,40]],[17,1,0,-3,[0,"bcMUILGFNN3JDz7drAw00U"],0],[21,1,false,true,-4,[0,"b6d8PP6tJOT77MP1Xa4dry"]]],[2,"14AXJF5oNKYYHMqoAVIfc+",null,null,null,-1,0],[1,-734.595,462.699,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,4,1,4],[0],[1],[29]],[[[10,"GravityTool"],[19,"GravityTool",[-5,-6],[[3,-2,[0,"e92HkhCYdCta0sZu6pzp2c"],[5,80,80]],[17,1,0,-3,[0,"121diy/X5JMZ9o3aFVTJ0Y"],2],[21,1,false,true,-4,[0,"2d4F7kLMVHz6oKg8DsQ/nT"]]],[2,"c7+1vmsfdOALUMRq0QoWiQ",null,null,null,-1,0],[1,-1625.127,232.874,0]],[13,"Tag",1,[[3,-7,[0,"55JIxYdNBCUaD8vU7BOwJi"],[5,78,54.4]],[22,"引力",40,false,-8,[0,"47+wS0BmFFkZY30yCQLxw2"],0],[23,-9,[0,"35n8AaexJNA6Y8lIyykSwE"]]],[2,"7fdDcgTOxEtoR1aJiP3eZ4",null,null,null,1,0],[1,0,75,0]],[20,"Node",1,[[28,-10,[0,"e5aPI3ybdNh5gdSzLtFkbM"]],[31,0,-11,[0,"f7l7E/Jj1Fua8L42UvHQM2"],1]],[2,"e13ppWNzBE+Iou981HUT5z",null,null,null,1,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,4,1,11],[0,0,0],[7,1,1],[6,7,30]],[[[10,"Land-Platform-Pure-Round"],[27,"Land-Platform-Pure-Round",512,[-5],[[3,-2,[0,"7e+6nwpeFA9Jkk1DSGB20K"],[5,1500,70]],[16,1,0,-3,[0,"bci408ucxCDaZtDVbNLZKq"],[4,4287598591],1],[34,1,true,-4,[0,"08FdL93EFOPLW+eVmccRTr"]]],[2,"5bIKwUfzNOSYFp2mjAO7Jw",null,null,null,-1,0],[1,-1121.871,-577.345,0]],[50,"Wall-002",512,1,[[3,-6,[0,"3fzneaKyRLUbQKevxGsahX"],[5,50,50]],[16,1,0,-7,[0,"e0Df1jfWNDn4Zt3iqPEfbH"],[4,4287598591],0],[36,-8,[0,"567WD4CEBPJ76yWC7V56As"]],[67,1,true,-9,[0,"92z1pdPflJ1JuWcFcY5c/4"]]],[2,"01VxuJ+KJFa6tJmxF4m5VQ",null,null,null,1,0],[1,746.502,0,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,0,2,0,4,1,9],[0,0],[1,1],[0,0]]]]
